package com.tradespeople.model;
// default package
// Generated Sep 7, 2013 9:10:51 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.ArrayList;
import java.util.List;



import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.tradespeople.common.api.BaseModel;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "tradesman")
public class User extends BaseModel implements java.io.Serializable {

	public void setUsername(String username) {
		this.username = username;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public void setToken(String token) {
		this.token = token;
	}

	public void setCreateddate(Date createddate) {
		this.createddate = createddate;
	}

	public void setUpdateddate(Date updateddate) {
		this.updateddate = updateddate;
	}

	public void setStatus(Byte status) {
		this.status = status;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	public void setComments(List<Comment> comments) {
		this.comments = comments;
	}

	public void setMedialookups(List<Medialookup> medialookups) {
		this.medialookups = medialookups;
	}

	public void setShops(List<Shop> shops) {
		this.shops = shops;
	}

	public void setUserroles(List<Userrole> userroles) {
		this.userroles = userroles;
	}

	private String username;
	private String password;
	private String token;
	private Date updateddate;
	private Byte status;
	private String name;
	private String surname;
	private List<Comment> comments;
	private List<Medialookup> medialookups;
	private List<Shop> shops;
	private List<Userrole> userroles;
	
	public User() {
	}

	public void ListId(long id) {
		this.setId(id);
	}

	@Column(name = "USERNAME", nullable = false, length = 150)
	public String getUsername() {
		return this.username;
	}

	public void ListUsername(String username) {
		this.username = username;
	}

	@Column(name = "PASSWORD", length = 100)
	public String getPassword() {
		return this.password;
	}

	public void ListPassword(String password) {
		this.password = password;
	}

	@Column(name = "TOKEN", length = 200)
	public String getToken() {
		return this.token;
	}

	public void ListToken(String token) {
		this.token = token;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "UPDATEDDATE", length = 0)
	public Date getUpdateddate() {
		return this.updateddate;
	}

	public void ListUpdateddate(Date updateddate) {
		this.updateddate = updateddate;
	}

	@Column(name = "STATUS")
	public Byte getStatus() {
		return this.status;
	}

	public void ListStatus(Byte status) {
		this.status = status;
	}

	@Column(name = "NAME", length = 45)
	public String getName() {
		return this.name;
	}

	public void ListName(String name) {
		this.name = name;
	}

	@Column(name = "SURNAME", length = 45)
	public String getSurname() {
		return this.surname;
	}

	public void ListSurname(String surname) {
		this.surname = surname;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public List<Comment> getComments() {
		return this.comments;
	}

	public void ListComments(List<Comment> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public List<Medialookup> getMedialookups() {
		return this.medialookups;
	}

	public void ListMedialookups(List<Medialookup> medialookups) {
		this.medialookups = medialookups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public List<Shop> getShops() {
		return this.shops;
	}

	public void ListShops(List<Shop> shops) {
		this.shops = shops;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public List<Userrole> getUserroles() {
		return this.userroles;
	}

	public void ListUserroles(List<Userrole> userroles) {
		this.userroles = userroles;
	}
	
	public List<Role> userRoles(){
		List<Role> roles=new ArrayList<Role>();
		for (Userrole userrole : userroles) {
			roles.add(userrole.getRole());
		}
		return roles;
	}
	
	public boolean hasExistAnyRole(){
		if (userroles==null) {
			return false;
		}else if (userroles.size()==0) {
			return false;
		}
		return true;
	}

	public boolean hasNotExistAnyRole() {
		return !hasExistAnyRole();
	}

	public void addRole(Role role){
		if (isNotExistsUserRoleFor(role)) {
			Userrole userrole=new Userrole();
			userrole.setUser(this);
			userrole.setRole(role);
			userroles.add(userrole);
		}
	}

	private boolean isNotExistsUserRoleFor(Role role) {
		return !userRoles().contains(role);
	}

}
